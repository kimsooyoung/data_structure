#include <stdio.h>
#include <stdlib.h>

struct Node* InsertNode(struct Node *current, int data);
void DestroyNode(struct Node *destroy, struct Node* head);
struct Node* CreateNode(int data); 
void PrintNodeFrom(struct Node *from);
int CountNode(struct Node* head);

struct Node {
	int data; /* 데이터 */
	struct Node* nextNode;
	struct Node* prevNode;
};
struct Node* CreateNode(int data){
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	newNode->nextNode = NULL;
	newNode->prevNode = NULL;
	newNode->data = data;
	return newNode;
}
struct Node* InsertNode(struct Node *current, int data) {
	struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
	struct Node* after = current->nextNode;
	newNode->data = data;
	newNode->nextNode = after;
	newNode->prevNode = current;
	/* current 는 이제 newNode 를 가리키게 된다 */  
	current->nextNode = newNode;
	if(after) after->prevNode = newNode;

	return newNode;
}
void DestroyNode(struct Node *destroy, struct Node* head) {
	if (destroy == head) {
		(head->nextNode)->prevNode = NULL;
		free(head);
		return;
	}
	while (head) {
		if (head->nextNode == destroy) {
			head->nextNode = destroy->nextNode;
			(destroy->nextNode)->prevNode = head;
			free(destroy);
		}
		head = head->nextNode;
	}
	printf("destination not found\n");
	return;
}
void PrintNodeFrom(struct Node *from) {
	while (from) {
		printf("노드의 데이터 : %d \n", from->data);
		from = from->nextNode;
	}
}
int CountNode(struct Node* head) {
	int count = 0;
	while (head) {
		count++;
		head = head->nextNode;
	}
	return count;
}
int main() {
	struct Node* Node1 = CreateNode(100); 
	struct Node* Node2 = InsertNode(Node1, 200);
	struct Node* Node3 = InsertNode(Node2, 300);
	/* Node 2 뒤에 Node4 넣기 */ 
	struct Node* Node4 = InsertNode(Node2, 400);
	PrintNodeFrom(Node1);
	printf("number is %d", CountNode(Node1));

	return 0;
}