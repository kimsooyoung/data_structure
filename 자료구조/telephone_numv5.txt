#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define INIT_CAPACITY 100
#define BUFFER_LENGTH 100
typedef struct person {
	char *name;
	char *number;
	char *email;
	char *group;
}Person;
Person **directory;
int capacity;
int n = 0;

void init();
int read_line(FILE *fp, char str[], int n);
void load(char *file_name);
void save(char *file_name);
void reallocate();
void add(char *name, char *number, char *email, char *group);
void _remove(char *name);
int search(char *name);
void release_person(Person *p);
void status();
void print_person(Person *p);
void find(char *name);
void handle_add(char *name);
int compose_name(char str[], int limit, char* context);

int main() {
	char *command, *context, *argument;
	char command_line[BUFFER_LENGTH], name_str[BUFFER_LENGTH];
	init();
	while (1) {
		printf("$ ");
		if (read_line(stdin, command_line, BUFFER_LENGTH) <= 0) continue;
		command = strtok_s(command_line, " ", &context);
		if (command == NULL) continue;

		if (strcmp(command, "read") == 0) {
			argument = strtok_s(NULL, " ", &context);
			if (argument == NULL) {
				printf("Invalid argument\n");
				continue;
			}
			load(argument);
			printf("Successfully loaded\n");
		}
		else if (strcmp(command, "add") == 0) {
			if(compose_name(name_str, BUFFER_LENGTH, context) <= 0){
				printf("Invalid argument\n");
				continue;
			}
			handle_add(name_str);
			printf("%s is successfully added\n", name_str);
		}
		else if (strcmp(command, "find") == 0) {
			if (compose_name(name_str, BUFFER_LENGTH, context) <= 0) {
				printf("Invalid argument\n");
				continue;
			}
			find(name_str);
		}
		else if (strcmp(command, "status") == 0) {
			status();
		}
		else if (strcmp(command, "delete") == 0) {
			if (compose_name(name_str, BUFFER_LENGTH, context) <= 0) {
				printf("Invalid argument\n");
				continue;
			}
			_remove(name_str);
			printf("%s was deleted successfully\n", name_str);
		}
		else if (strcmp(command, "save") == 0) {
			argument = strtok_s(NULL, " ", &context);
			if (argument == NULL || strcmp(argument, "as") != 0) {
				printf("Invalid argument\n");
				continue;
			}
			argument = strtok_s(NULL, " ", &context);
			if (argument == NULL) {
				printf("Type File name\n");
				continue;
			}
			save(argument);
			printf("Successfully saved\n");
		}
		else if (strcmp(command, "exit") == 0) {
			for (int i = 0; i < n; i++)
				release_person(directory[i]);
			free(directory);
			break;
		}
		else printf("No such command\n");
	}
}
void init() {
	directory = (Person **)malloc(sizeof(Person*) * INIT_CAPACITY);
	capacity = INIT_CAPACITY;
	n = 0;
}
void reallocate() {
	capacity *= 2;
	Person **temp = (Person **)malloc(sizeof(Person*) * capacity);
	for (int i = 0; i < n; i++)
		temp[i] = directory[i];
	free(directory);
	directory = temp;
}
int read_line(FILE *fp, char str[], int n) {
	int ch, i = 0;
	while ((ch = fgetc(fp)) != '\n' && ch != EOF)
		if (i < n)
			str[i++] = ch;
	str[i] = '\0';
	return i;
}
int search(char *name) {
	int i = 0;
	for (; i < n; i++)
		if (strcmp(name, directory[i]->name) == 0)
			return i;
	return -1;
}
void load(char *file_name) {
	FILE *fp;
	char *token, *context, *name, *number, *email, *group;
	char buffer[BUFFER_LENGTH];
	errno_t err = fopen_s(&fp, file_name, "r");
	if (err != 0) {
		printf("File Error\n");
		return;
	}
	while (read_line(fp, buffer, BUFFER_LENGTH) > 0) {
		name = strtok_s(buffer, "#", &context);
		token = strtok_s(NULL, "#", &context);
		//if (strcmp(token, " ") == 0)
		//	number = NULL;
		//else
		//	number = _strdup(token);
		//token = strtok_s(NULL, "#", &context);
		//if (strcmp(token, " ") == 0)
		//	email = NULL;
		//else
		//	email = _strdup(token);
		//token = strtok_s(NULL, "#", &context);
		//if (strcmp(token, " ") == 0)
		//	group = NULL;
		//else
		//	group = _strdup(token);
		(strcmp(token, " ") == 0) ? (number = NULL) : (number = _strdup(token));
		(strcmp((token = strtok_s(NULL, "#", &context)), " ") == 0) ? (email = NULL) : (email = _strdup(token));
		(strcmp((token = strtok_s(NULL, "#", &context)), " ") == 0) ? (group = NULL) : (group = _strdup(token));
		add(_strdup(name), number, email, group);
	}
	fclose(fp);
}
void save(char * file_name) {
	FILE *fp;
	errno_t err = fopen_s(&fp, file_name, "w");
	if (err != 0) {
		printf("File Error\n");
		return;
	}
	for (int i = 0; i < n; i++) {
		fprintf(fp, "%s#", directory[i]->name);
		fprintf(fp, "%s#", directory[i]->number);
		fprintf(fp, "%s#", directory[i]->email);
		fprintf(fp, "%s#\n", directory[i]->group);
	}
	fclose(fp);
}
void add(char *name, char *number, char *email, char *group) {	
	if(n >= capacity)
		reallocate();
	
	int i = n - 1;
	while (i >= 0 && strcmp(name, directory[i]->name) < 0) {
		directory[i + 1] = directory[i];
		i--;
	}
	/******IMPORTANT**********/
	directory[i + 1] = (Person *)malloc(sizeof(Person));
	/*************************/
	directory[i + 1]->name = name;
	directory[i + 1]->number = number;
	directory[i + 1]->email = email;
	directory[i + 1]->group = group;
	n++;
}
void _remove(char *name) {
	int i = search(name);
	if (i < 0) {
		printf("No person named : %s exits, \n", name);
		return;
	}
	Person *p = directory[i];
	for (; i < n; i++)
		directory[i] = directory[i + 1];
	n--;
	release_person(p);
}
void release_person(Person *p) {
	free(p->name);
	if (p->number != NULL) free(p->number);
	if (p->email != NULL) free(p->email);
	if (p->group != NULL) free(p->group);
	free(p);
}
void status() {
	for (int i = 0; i < n; i++) {
		print_person(directory[i]);
	}
	printf("Total %d person\n", n);
}
void print_person(Person* p) {
	printf("%s:\n", p->name);
	printf("	Phone: %s\n", p->number);
	printf("	Email: %s\n", p->email);
	printf("	Group: %s\n", p->group);
}
void find(char *name) {
	int i = search(name);
	if (i < 0) {
		printf("No person named %s", name);
		return;
	}
	print_person(directory[i]);
}
void handle_add(char *name) {
	char number[BUFFER_LENGTH], email[BUFFER_LENGTH], group[BUFFER_LENGTH];
	char empty[] = " ";
	
	printf("  Phone: ");
	read_line(stdin, number, BUFFER_LENGTH);
	printf("  E-mail: ");
	read_line(stdin, email, BUFFER_LENGTH);
	printf("  Group: ");
	read_line(stdin, group, BUFFER_LENGTH);

	add(name, (char *)(strlen(number) > 0 ? _strdup(number) : empty),
		(char *)(strlen(email) > 0 ? _strdup(email) : empty),
		(char *)(strlen(group) > 0 ? _strdup(group) : empty));
}
int compose_name(char str[], int limit, char* context) {
	char *token;
	int length = 0;
	if ((token = strtok_s(NULL, " ", &context)) == NULL)
		return -1;
	strcpy_s(str, BUFFER_LENGTH, token);
	length += strlen(token);
	while ((token = strtok_s(NULL, " ", &context)) != NULL) {
		if ((length + strlen(token) + 1) < (unsigned int)limit) {
			str[length++] = ' ';
			str[length] = '\0';
			strcat_s(str, BUFFER_LENGTH, token);
			length += strlen(token);
		}		
	}
	return length;
}
