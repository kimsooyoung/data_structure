#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define CAPACITY 100
#define BUFFER_SIZE 20

char* names[CAPACITY];
char* numbers[CAPACITY];
int n = 0;

char* str_dup(char*);
int search(char*);
void add();
void find();
void status();
void remove_my();
void load();
void save();

int main() {
	char command[BUFFER_SIZE];
	while (1) {
		printf("$ ");
		scanf_s("%s", command, sizeof(command));

		if (strcmp(command, "read") == 0)
			load();
		else if (strcmp(command, "add") == 0)
			add();
		else if (strcmp(command, "find") == 0)
			find();
		else if (strcmp(command, "status") == 0)
			status();
		else if (strcmp(command, "delete") == 0)
			remove_my();
		else if (strcmp(command, "save") == 0)
			save();
		else if (strcmp(command, "exit") == 0)
			break;
		//else
			//printf("\n");
	}
	return 0;
}
char* str_dup(char* buffer) {
	char * p;
	p = (char *)malloc(strlen(buffer) + 1);
	if (p != NULL)
		strcpy_s(p, sizeof(p), buffer);
	return p;
}
int search(char* buffer) {
	int i = 0;
	for (; i < n; i++)
		if (strcmp(buffer, names[i]) == 0)
			return i;

	return -1;
}
void add() {
	char name[BUFFER_SIZE], number[BUFFER_SIZE];
	scanf_s("%s", name, sizeof(name));
	scanf_s("%s", number, sizeof(number));

	int i = n - 1;
	while (i >= 0 && strcmp(name, names[i]) < 0) {
		names[i + 1] = names[i];
		numbers[i + 1] = numbers[i];
		i--;
	}
	names[i + 1] = _strdup(name);
	numbers[i + 1] = _strdup(number);
	n++;
	printf("%s was added successfully\n", name);
}
void find() {
	int index = 0;
	char name[BUFFER_SIZE];
	scanf_s("%s", name, sizeof(name));
	index = search(name);
	
	if (index >= 0) {
		printf("%s\n", numbers[index]);
		return;
	}

	printf("No person named '%s' exists\n", name);
	return;
}
void status() {
	for (int i = 0; i < n; i++) {
		printf("%s %s\n", names[i], numbers[i]);
	}
	printf("Total %d persons\n", n);
}
void remove_my() {
	char name[BUFFER_SIZE];

	scanf_s("%s", name, sizeof(name));
	int index = search(name);	
	if (index == -1) {
		printf("No person named '%s' exists. \n", name);
		return;
	}
	for (; index < n - 1; index++) {
		names[index] = names[index + 1];
		numbers[index] = numbers[index + 1];
	}
	n--;
	printf("'%s' was successfully deleted. \n", name);
	return;
}
void load() {
	char file_name[BUFFER_SIZE];
	char buffer[BUFFER_SIZE];
	char buffer2[BUFFER_SIZE];
	FILE *fp;

	scanf_s("%s", file_name, sizeof(file_name));
	errno_t error = fopen_s(&fp, file_name, "r");
	if (error != 0) {
		printf("error");
		return;
	}
	while (fscanf_s(fp, "%s", buffer, BUFFER_SIZE) != EOF) {
		fscanf_s(fp, "%s", buffer2, BUFFER_SIZE);
		names[n] = _strdup(buffer); 
		numbers[n] = _strdup(buffer2);
		//names[n] = buffer; 
		//numbers[n] = buffer2; 
		// nononono~~
		printf("%s %s \n", buffer, buffer2);
		n++;
	}
	fclose(fp);
	return;
}
void save() {
	char file_name[BUFFER_SIZE];
	FILE *fp;

	scanf_s("%s", file_name, sizeof(file_name));
	errno_t error = fopen_s(&fp, file_name, "w");
	if (error != 0) {
		printf("error");
		return;
	}

	for (int i = 0; i < n; i++)
		fprintf(fp, "%s %s\n", names[i], numbers[i]);

	fclose(fp);
	return;
}