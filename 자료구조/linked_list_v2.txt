#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct node {
	char *data;
	struct node *next;
};

typedef struct node Node;
Node *head = NULL;

void add_first(char *item){
	Node *temp = (Node *)malloc(sizeof(Node));
	temp->data = item;
	temp->next = head;
	head = temp;
}//head = add_first(head, item)
int add_after(Node *prev, char *item) {
	if (prev == NULL)
		return 0;
	Node *temp = (Node*)malloc(sizeof(Node));
	temp->data = item;
	temp->next = prev->next;
	prev->next = temp;
	return 1;
}
Node* remove_first() {
	if (head == NULL)
		return NULL;
	else {
		Node* temp = head;
		head = head->next;
		return temp;
	}
}
Node * remove_after(Node *prev) {
	Node *temp = prev->next;
	if (temp == NULL)
		return NULL;
	else {
		prev->next = temp->next;
		return temp;
	}
}
Node* find(char *word) {
	Node *p = head;
	//while (strcmp(word, p->data) != 0) 
	while(p != NULL) {
		if (strcmp(word, p->data) == 0)
			return p;
		p = p->next;
	}
	return NULL;
}
Node* get_node(int index) {
	if(index < 0)
		return NULL;
	Node *p = head;
	for (int i = 0; i < index && p != NULL; i++)
		p = p->next;
	return p;
}
void add(int index, char *item) {
	if (index < 0)
		return NULL;
	if (index == 0) {
		add_first(item);
		return 0;
	}
	Node *prev = get_node(index - 1);
	if (prev != NULL) {
		add_after(prev, item);
		return 1;
	}
	return 0;
}
Node* remove_node(int index) {
	if (index < 0)
		return NULL;
	if (index == 0) {
		return remove_first();
	}
	Node *prev = get_node(index - 1);
	if (prev != NULL) {
		return remove_after(prev);
	}
	return NULL;
}
Node* remove_by_item(char *item) {
	Node *p = head;
	Node *q = NULL;
	while (p != NULL && strcmp(p->data, item) != 0) {
		q = p;
		p = p->next;
	}
	if (p == NULL)
		return NULL;
	if (q == NULL)
		return remove_first();
	else
		return remove_after(q);
}
void add_to_ordered_list(char *item) {
	Node *p = head;
	Node *q = NULL;
	while (p != NULL && strcmp(item, p->data) >= 0) {
		q = p;
		p = p->next;
	}
	if (q == NULL)
		add_first(item);
	else
		add_after(q, item);
}
int main(){

	return 0;
}